package com.hellopi;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

import com.pi4j.io.gpio.GpioController;
import com.pi4j.io.gpio.GpioFactory;
import com.pi4j.io.gpio.GpioPinDigitalOutput;
import com.pi4j.io.gpio.Pin;
import com.pi4j.io.gpio.RaspiPin;

public class Gpio {

	Map<Pin, GpioPinDigitalOutput> map = new HashMap<Pin, GpioPinDigitalOutput>();

	public Gpio(String[] arg) throws InterruptedException, IOException {
		final GpioController gpio = GpioFactory.getInstance();
		Pin[] allPins = RaspiPin.allPins();
		for (Pin pin : allPins) {
			GpioPinDigitalOutput gpioPin = gpio.provisionDigitalOutputPin(pin);
			map.put(pin, gpioPin);
		}

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String in = br.readLine();
		GpioPinDigitalOutput pin = map.get(findPinByName("GPIO " + in));
		pin.setState(pin.isLow());
		power(map, false, 20);
	}

	private Pin findPinByName(String gpioName) {
		Pin[] allPins = RaspiPin.allPins();
		for (Pin pin : allPins) {
			if (pin.getName().equals(gpioName)) {
				return pin;
			}
		}
		return null;
	}

	private void setLed(GpioPinDigitalOutput gpioGreen, boolean power) throws InterruptedException {
		gpioGreen.setState(power);
	}

	private void power(Map<Pin, GpioPinDigitalOutput> map, boolean power, int speed) throws InterruptedException {
		int i = 0;
		for (GpioPinDigitalOutput gpioPin : map.values()) {
			if (power) {
				gpioPin.setState(gpioPin.isLow());
			}
			System.out.print(gpioPin.getName() + "\t" + (gpioPin.getState().isHigh() ? "*" : " ") + "\t");
			if (++i % 5 == 0) {
				System.out.println();
			}
			Thread.sleep(speed);
		}
		System.out.println();
	}

	public static void main(String[] args) throws InterruptedException, IOException {
		new Gpio(args);
	}
}
